#!/bin/bash
set -e

pdmin=5
pdstep=10
minnodes=6
maxnodes=10
maxwait=30
mutex='/run/spartbalance.lock'


function normal_node_count() {
    sinfo -p normal -h -o "%D"
}


function multi_node_count() {
    sinfo -p multi -h -o "%D"
}


function normal_pd_job_count() {
    squeue -p normal -t PD -h -o "%i" | wc -l
}

function normal_pd_wait() {
    submittime=$(squeue -p normal -t PD -h -o "%V" -S "t,-p" | head -1)
    if [ -n "$submittime" ]; then
        submitted=$(date --date="$submittime" +%s)
        now=$(date +%s)
        echo $((now - submitted))
    else
        echo -1
    fi
}


function balance() {
    local waittime=$(normal_pd_wait)
    local pdct=$(normal_pd_job_count)
    local need=$((($pdct - $pdmin + $pdstep) / $pdstep))
    local nct=$(normal_node_count)
    local mct=$(multi_node_count)

    if [ $need -gt 0 -a $nct -ge $maxnodes -a $waittime -ge $maxwait ]; then
        echo "Need $need nodes but there are already $nct normal nodes, cannot allocate more (maxnodes is $maxnodes), exiting"
        need=0
    elif [ $need -gt 0 -a $waittime -ge $maxwait ]; then
        if [ $(($need + $nct)) -ge $maxnodes ]; then
            echo "Need $need nodes but have $nct and cannot exceed $maxnodes, only $(($maxnodes - $nct)) will be allocated"
            need=$(($maxnodes - $nct))
        else
            echo "Need $need extra nodes"
        fi
    elif [ $need -gt 0 -a $waittime -ge 0 ]; then
        echo "$need nodes needed but oldest job has been waiting $waittime seconds (max wait is $maxwait seconds)"
        return 0
    elif [ $need -eq 0 -a $nct -le $minnodes -o $pdct -gt 0 ]; then
        echo "No nodes needed, waiting job count: $pdct"
        [ $pdct -gt 0 ] && echo "Oldest job waiting $waittime seconds"
        rm -f $mutex
        return 0
    elif [ $need -eq 0 ]; then
        echo "Have $(($nct - $minnodes)) extra nodes, will decrease by 1"
        need=-1
    elif [ $need -lt 0 ]; then
        echo "need is $need, this is an error"
        echo "pdct: $pdct, pdmin: $pdmin, pdstep: $pdstep"
        rm -f $mutex
        return 1
    fi

    [ $need -eq 0 ] && return 0

    local nnodes=$((64 + 1 - $nct - $need))
    local mnodes=$(($nnodes - 1))

    set -x
    scontrol update PartitionName=multi "Nodes=roundup[49-$mnodes]"
    scontrol update PartitionName=normal "Nodes=roundup[$nnodes-64]"
    { set +x; } 2>/dev/null
}

if [ -f $mutex ]; then
    echo "$mutex exists! exiting" 1>&2
    exit 1
fi

echo $$ > $mutex

balance

r=$?
rm -f $mutex
exit $r
